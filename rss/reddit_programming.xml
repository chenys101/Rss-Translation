<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Fri, 05 Sep 2025 15:23:48 GMT</lastBuildDate>
    <item>
      <title>在ml.net中加载数据：带有C＃示例的初学者指南</title>
      <link>https://www.reddit.com/r/programming/comments/1n986z4/loading_data_in_mlnet_a_beginners_guide_with_c/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/congolomera     [link]   ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n986z4/loading_data_in_mlnet_a_beginners_guide_with_c/</guid>
      <pubDate>Fri, 05 Sep 2025 15:22:44 GMT</pubDate>
    </item>
    <item>
      <title>我抛弃了Podman的Docker</title>
      <link>https://www.reddit.com/r/programming/comments/1n97mbo/i_ditched_docker_for_podman/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/chilipepperhott      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n97mbo/i_ditched_docker_for_podman/</guid>
      <pubDate>Fri, 05 Sep 2025 15:00:48 GMT</pubDate>
    </item>
    <item>
      <title>加密无法停止</title>
      <link>https://www.reddit.com/r/programming/comments/1n97ltf/cryptography_cant_be_stopped/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/oakchris1955     [link]        [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n97ltf/cryptography_cant_be_stopped/</guid>
      <pubDate>Fri, 05 Sep 2025 15:00:19 GMT</pubDate>
    </item>
    <item>
      <title>40年后，本特利的“编程珍珠”是否仍然相关？</title>
      <link>https://www.reddit.com/r/programming/comments/1n96ftn/40_years_later_are_bentleys_programming_pearls/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/garethx     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n96ftn/40_years_later_are_bentleys_programming_pearls/</guid>
      <pubDate>Fri, 05 Sep 2025 14:15:00 GMT</pubDate>
    </item>
    <item>
      <title>建立AI代理商玩著名游戏：休闲西装拉里（第3集）</title>
      <link>https://www.reddit.com/r/programming/comments/1n95gwo/building_ai_agents_to_play_the_famous_game/</link>
      <description><![CDATA[在克劳德（Claude）击败休闲服拉里（Larry）？ （第3部分） 看着尖端的AI代理商应对传奇的Sierra Adventure游戏休闲服拉里！这个全面的系列探讨了现代LLM在经典游戏环境中如何处理复杂的推理，幽默和解决难题。 &lt; /p&gt; ＃系列视频播放列表： https://www.youtube.com/watch?v=mj85wm-smzy＆amp； list = pld8ssd0pfra6bckblimh67qrkix3ehqii  第1部分：概述/演示 https://www.youtube.com/watch?v=e42i2i2bp0bp0bp0bp0f6g  part href =“ https://youtu.be/oxa1z_zkq0q”&gt; https://youtu.be/oxa1z_zkq0q  第2A部分：背景信息 https://youtu.be/mj85wm-smzy  第3部分：克服 https://youtu.be/ifwimmfovq4     ＃＃＃    - 复杂的的常见挑战可能是对象的可能  -  br/p挑战    p&gt; p&gt; p&gt; p&gt; p&gt; p&gt; p&gt; p&gt; p&gt; p&gt; p&gt; p&gt; p&gt; p&gt; p&gt; p&gt;＃ /&gt; 4:00克服AI视觉限制并制作更好的边界框&lt; /p&gt; ＃＃技术堆栈 AGI引擎：冒险游戏解释器后端：CrafterCMS + Spring AI框架 AI  ai模型：Grok + Grok + Grok + Grok Vision（xai） br /&gt; restands  &lt; /p &lt; /p&gt;萨顿：橡树建筑＆amp;超级智能 -   https://wwwww.youtube.com/watch?v=gebbggynkr2u   href =“ https://www.youtube.com/watch?v=iz9lumsqbfy”&gt; https://wwww.youtube.com/watch?v= = iiz9lumsqbfy    Rich Sutton： https://www.youtube.com/watch?v=2yyjps8t8mi  href =“ http://creativecommons.org”&gt; http://creativecommons.org     ＃#aiagents #llm #machinelearning #mamachinelearning＃arterearigence＃agentiCai＃ #MCP #Airesearch #gameai #glmevaluation #multimodalai #aibenchmarks #retrogaming #sierragames #leisuresureuitlarry #aitesting #mlengineing #aiarchitection #aiarchain #langchain＃aiagentFrameWorks #aiagentframeworks     &lt;！提交由＆＃32; /u/u/uss-danner      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n95gwo/building_ai_agents_to_play_the_famous_game/</guid>
      <pubDate>Fri, 05 Sep 2025 13:35:53 GMT</pubDate>
    </item>
    <item>
      <title>确保非人类身份的策略（服务，工作量，AI代理）</title>
      <link>https://www.reddit.com/r/programming/comments/1n932vx/strategies_for_securing_nonhuman_identities/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/West-Chard-1474   [link] ＆＃32;   [commist]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n932vx/strategies_for_securing_nonhuman_identities/</guid>
      <pubDate>Fri, 05 Sep 2025 11:48:45 GMT</pubDate>
    </item>
    <item>
      <title>在10分钟内为初学者（带有作业）做了一个教程Python</title>
      <link>https://www.reddit.com/r/programming/comments/1n92nbh/made_a_tutorial_python_in_10_minutes_for/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我刚刚上传了一个简短且友好的 python教程在YouTube上，我仅在10分钟内解释核心概念。完美。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/priler96      [commist]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n92nbh/made_a_tutorial_python_in_10_minutes_for/</guid>
      <pubDate>Fri, 05 Sep 2025 11:26:39 GMT</pubDate>
    </item>
    <item>
      <title>构建一种编程语言，该语言像英语：Plainlang的课程：</title>
      <link>https://www.reddit.com/r/programming/comments/1n920j7/building_a_programming_language_that_reads_like/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  最近，我开始使用一种称为 plainlang 的实验语言，其想法使编程更接近自然对话。您没有符号和标点符号，而是写完整句子，例如：  将问候设置为“ Hello World”。在屏幕上显示问候。   从技术的角度来看，我认为可能值得在这里分享一些有趣的挑战：    解析“松散”英语：传统分析师期望僵化的语法。 plainlang允许诸如“ the”，“ a”或“ then”之类的可选词，因此解析器必须宽容而不会失去结构。我最终得到了一个递归下降解析器的灵活性，这比预期的要棘手。  代词支持：该语言让您使用“ IT”来指代上一次计算的结果。这需要在运行时跨语句携带上下文状态，这种设计模式在使用方面感觉很简单，但要正确实现。  错误的消息感觉到人类：如果某人写入   score 而无需首次设置得分 score ，则在运行时却透露次数，而不是拼凑出来，而不是spting sprate stract targe of pack targe of pack shot the spect。为“英语”代码编写有用的诊断。  该项目还很年轻，但是它已经支持变量，算术，有条件，循环，循环和互动式重置。 我对其他人的听力感兴趣，他们试图使更多的“人类”的语言和精确的precants      源（MIT许可证）  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/ionutvi       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n920j7/building_a_programming_language_that_reads_like/</guid>
      <pubDate>Fri, 05 Sep 2025 10:53:29 GMT</pubDate>
    </item>
    <item>
      <title>不久前，我制作了世界上最准确的* AI文本检测器</title>
      <link>https://www.reddit.com/r/programming/comments/1n91fv2/a_while_ago_i_made_the_worlds_most_accurate_ai/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  虽然从技术上讲可能准确，但显然不会太认真对待，尽管我有兴趣看到您认为您的想法  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/ossner      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n91fv2/a_while_ago_i_made_the_worlds_most_accurate_ai/</guid>
      <pubDate>Fri, 05 Sep 2025 10:20:50 GMT</pubDate>
    </item>
    <item>
      <title>教恐龙跳跃：生锈，Websembly和神经进化</title>
      <link>https://www.reddit.com/r/programming/comments/1n8ysbr/teaching_a_dinosaur_to_jump_rust_webassembly_and/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/pmz      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n8ysbr/teaching_a_dinosaur_to_jump_rust_webassembly_and/</guid>
      <pubDate>Fri, 05 Sep 2025 07:29:45 GMT</pubDate>
    </item>
    <item>
      <title>为什么“教程地狱”实际上对您有好处：探索与剥削方法</title>
      <link>https://www.reddit.com/r/programming/comments/1n8yqq6/why_tutorial_hell_is_actually_good_for_you_an/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/nicdeviam     [link]      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n8yqq6/why_tutorial_hell_is_actually_good_for_you_an/</guid>
      <pubDate>Fri, 05 Sep 2025 07:26:46 GMT</pubDate>
    </item>
    <item>
      <title>SQL需要结构</title>
      <link>https://www.reddit.com/r/programming/comments/1n8yose/sql_needed_structure/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/genericlemon24   [link]   [commist]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n8yose/sql_needed_structure/</guid>
      <pubDate>Fri, 05 Sep 2025 07:23:11 GMT</pubDate>
    </item>
    <item>
      <title>62全面的编程教程：大师AI，数据库，DevOps等</title>
      <link>https://www.reddit.com/r/programming/comments/1n8y5bd/62_comprehensive_programming_tutorials_master_ai/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/taskade     [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n8y5bd/62_comprehensive_programming_tutorials_master_ai/</guid>
      <pubDate>Fri, 05 Sep 2025 06:48:30 GMT</pubDate>
    </item>
    <item>
      <title>类型检查是一种症状，而不是解决方案</title>
      <link>https://www.reddit.com/r/programming/comments/1n8xyfi/type_checking_is_a_symptom_not_a_solution/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/mmaksimovic     ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n8xyfi/type_checking_is_a_symptom_not_a_solution/</guid>
      <pubDate>Fri, 05 Sep 2025 06:36:40 GMT</pubDate>
    </item>
    <item>
      <title>嘿，高级开发人员，builder.io / lodable / dhiwise如何真正从无花果设计中生成代码？我理解这是对的吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1n8wxya/hey_senior_devs_how_do_builderio_lovable_dhiwise/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿，高级开发人员，我一直在探索 builder.io 可爱，dhiwise，以及dhiwise dhiwise将无花果设计转换为工作代码，以及我试图了解其在场景后面工作的工作方式。我以为到目前为止，我会分享我拼凑在一起的内容，并询问我的理解是否在正确的轨道上。 根据我的说明，该过程首先使用其API或插件从Figma中获取原始设计数据。 JSON描述了每个帧，文本和图层，但是直接使用的工作是混乱的。因此，下一步似乎将其标准化为内部模式。例如，“帧”可能会映射到“容器”，“文本”中的“排版”等等。该部分看上去主要是基于规则的，而不是基于AI的规则。 一旦存在模式，就可以使用规则填充的模板生成代码。带有文本，字体大小和颜色的按钮模式将插入预定义的模板中，并输出带有内联样式的React ＆gt; 。这使得可以预测结果并避免AI幻觉。 我无法完全获得的是，当这些确切的变化不在原始模板中时，这些工具如何处理用户提示，例如“使此按钮”或“将此布局切换到网格”。他们是否只是继续扩展规则和模板，还是在AI上层上的AI层以进行修补并调整生成的代码？ 此总体流程听起来准确吗？我错过了重要的东西吗？我很想听听任何具有构建或研究设计与代码系统的经验的人，甚至链接到我可以挖掘的可靠技术故障的链接。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/pranv__2706     &lt;a href =“ https://www.reddit.com/r/programming/comments/1n8wxya/hey_senior_devs_how_do_do_buildo_builderio_lovable_dhiwise/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n8wxya/hey_senior_devs_how_do_builderio_lovable_dhiwise/</guid>
      <pubDate>Fri, 05 Sep 2025 05:34:24 GMT</pubDate>
    </item>
    </channel>
</rss>