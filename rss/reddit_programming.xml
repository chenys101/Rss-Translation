<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Mon, 14 Jul 2025 09:35:36 GMT</lastBuildDate>
    <item>
      <title>GitHub-Basaicorp/Razen-Lang：Razen是一种现代，轻巧的编程语言，具有类似Python的语法，高性能和内置调试。非常适合脚本，测试和自定义模块开发。</title>
      <link>https://www.reddit.com/r/programming/comments/1lzhwos/github_basaicorprazenlang_razen_is_a_modern/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我一直在使用一种称为razen lang的编程语言，已有3个月多了。这是我一直想做的事情 - 制作一种易于使用的编译语言。我真的没有一支球队或其他任何东西，只是在我走时一直在弄清楚东西。我将其进入了Beta阶段，但实际上是在工作，尽管仍然需要大量改进。它根本不是完美的，但是我在建造它时学到了很多东西，我对它的发展感到满意。 现在，由于学习内容，我决定暂停该项目一段时间。不过，我一定会继续完成并稍后再完成，只需要休息一下即可关注其他事情。如果有人想检查一下，github在这里： https://github.com/basaicorp/basaicorp/razen-lazen-lang  提交由＆＃32; /u/u/u/u/glagjellyfish9752      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lzhwos/github_basaicorprazenlang_razen_is_a_modern/</guid>
      <pubDate>Mon, 14 Jul 2025 09:28:31 GMT</pubDate>
    </item>
    <item>
      <title>为什么要代数效应？</title>
      <link>https://www.reddit.com/r/programming/comments/1lzh0iw/why_algebraic_effects/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我个人喜欢怪异的控制流模式，我认为本文在介绍代数效应  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/laplab      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lzh0iw/why_algebraic_effects/</guid>
      <pubDate>Mon, 14 Jul 2025 08:29:41 GMT</pubDate>
    </item>
    <item>
      <title>CPU中的二进制逻辑：为什么有三个逻辑运算符，而不是两个？</title>
      <link>https://www.reddit.com/r/programming/comments/1lzfxfh/binary_logic_in_cpus_why_are_there_three_logical/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  有人可以解释CPU逻辑运算符背后的理论吗？我的问题是，是否只有二进制逻辑运算符（只有两个）是三个，而其他CPU组件（例如数据流，控制流量和算术单元）都是二进制的。提交由＆＃32; /u/u/cy_ocelot_3929        [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lzfxfh/binary_logic_in_cpus_why_are_there_three_logical/</guid>
      <pubDate>Mon, 14 Jul 2025 07:17:12 GMT</pubDate>
    </item>
    <item>
      <title>我从为100多名自由职业者建立投资组合网站中学到了什么（大多数开发投资组合出错了）</title>
      <link>https://www.reddit.com/r/programming/comments/1lzfil2/what_i_learned_from_building_a_portfolio_site_for/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大多数开发人员投资组合都集中在构建的内容上，但是客户和招聘人员更关心为什么和如何关心。 这是我在分析100+真实的自由职业组合之后注意到的3件事：   •没有明确的价值提议：“我构建了vague sagps of vague”。 “我帮助创业公司在3周内验证MVP”是具体而信任的。 •没有社交证明：证明书，LinkedIn评论，甚至Github Stars也有所帮助。这是关于感知到的信任。 •未针对移动设备进行优化：您会惊讶于手机上有多少个投资组合。即使大多数客户从移动设备中检查它们。 我构建了一个简单的配置文件系统来解决这些问题。这不是简历网站，更像是一个干净的单口斗篷，您可以在其中插入标题，项目和链接。而且它只是有效的。 不会在这里插入（不想违反规则），但是如果您很好奇，DM。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;  /u/Conscious_Aide9204   [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lzfil2/what_i_learned_from_building_a_portfolio_site_for/</guid>
      <pubDate>Mon, 14 Jul 2025 06:50:39 GMT</pubDate>
    </item>
    <item>
      <title>了解GO中的工厂方法模式：实用指南</title>
      <link>https://www.reddit.com/r/programming/comments/1lzf4bf/understanding_the_factory_method_pattern_in_go_a/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  最近，我一直在重新审视一些经典的设计模式，但试图从Go开发人员的角度来看它们 - 不仅是在Java Books中的OOP解释。 我写了一个详细的绘制量的`` &#39;&#39; ，我写了一个详细的范围。 工厂方法如何有助于保持创建逻辑本地，可扩展和测试友好 惯用的GO示例（Interfaces + structs + structs + struct，没有假继承） 常见变化，例如动态选择，基于注册的创建者和测试时间的创造者和测试时间注入和li&gt; li&gt; li&gt;    如果您要构建CLI工具，可扩展的系统，或者只是希望您的代码库在不成为意大利面的构造工厂发展，它可能会有所帮助。 不要试图出售任何东西 - 只是分享，因为我发现写作对我也很澄清。     https://medium.com/design-bootcamp/understanding-the-the-factory-method-pattern-pattern-in-go-a-practical-guide-86c0d1ca537b   很高兴讨论或听到他人如何在GO中进行此操作！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/priyankchheda15     [link]     [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lzf4bf/understanding_the_factory_method_pattern_in_go_a/</guid>
      <pubDate>Mon, 14 Jul 2025 06:25:15 GMT</pubDate>
    </item>
    <item>
      <title>动态classfile生成可节省15.5纳秒</title>
      <link>https://www.reddit.com/r/programming/comments/1lzcysj/dynamic_classfile_generation_to_save_155/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/BlueGoliath   [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lzcysj/dynamic_classfile_generation_to_save_155/</guid>
      <pubDate>Mon, 14 Jul 2025 04:18:35 GMT</pubDate>
    </item>
    <item>
      <title>Zig的新I/O：功能着色是不可避免的吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1lza2u7/zigs_new_io_function_coloring_is_inevitable/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/breweddoritos      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lza2u7/zigs_new_io_function_coloring_is_inevitable/</guid>
      <pubDate>Mon, 14 Jul 2025 01:49:50 GMT</pubDate>
    </item>
    <item>
      <title>让我们学习X86-64组装！第0部分</title>
      <link>https://www.reddit.com/r/programming/comments/1lz9u30/lets_learn_x8664_assembly_part_0/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/gametorch       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lz9u30/lets_learn_x8664_assembly_part_0/</guid>
      <pubDate>Mon, 14 Jul 2025 01:37:57 GMT</pubDate>
    </item>
    <item>
      <title>我制作了一个AI设备，它给了我夏洛克·福尔摩斯超级大国！</title>
      <link>https://www.reddit.com/r/programming/comments/1lz6u8n/i_made_a_ai_device_that_gives_me_sherlock_holmes/</link>
      <description><![CDATA[在href =“ https://github.com/leviathanengineer/sherlock-holmes-vision--”&gt; https://github.com/leviachanengineer/sherlock-lock-holmes-vision-vision-vision-vision-vision-  提交由＆＃32; /u/u/leviathan_engineer      [link]   ＆＃32;  &lt;a href =“ https://www.reddit.com/r/programming/comments/1lz6u8n/i_made_a_ai_ai_ai_ai_ai_device_that_gives_gives_gives_me_sherlock_holmes/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lz6u8n/i_made_a_ai_device_that_gives_me_sherlock_holmes/</guid>
      <pubDate>Sun, 13 Jul 2025 23:14:38 GMT</pubDate>
    </item>
    <item>
      <title>Loon实际上是为了什么？</title>
      <link>https://www.reddit.com/r/programming/comments/1lz6al1/what_is_loon_actually_for/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  最近我发布了有关我的项目loon（面向标签的对象符号）的信息，有些人问为什么它如此冗长，并说它看起来很难使用。我想澄清 loon应该是JSON 的中间语言（以后使用其他语言）。它通过使代码与注射操作员更具可读性和可重复使用，并使数据有意义但有条理，从而提供了一层抽象。希望这阐明了一些事情：）。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/percormerDazzling601     [link link]&gt; [link]&gt; [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lz6al1/what_is_loon_actually_for/</guid>
      <pubDate>Sun, 13 Jul 2025 22:50:09 GMT</pubDate>
    </item>
    <item>
      <title>Bruno邮递员：自动化API文档的周末迁移 + AI工作流程</title>
      <link>https://www.reddit.com/r/programming/comments/1lz5eej/postman_to_bruno_weekend_migration_ai_workflow/</link>
      <description><![CDATA[We switched from Postman to Bruno and built an AI integration that generates comprehensive documentation from minimal .bru files. Key improvements: - Git-friendly collections that live with our code - No more cloud sync issues or stale documentation - AI workflow generates打字稿接口，反应查询挂钩和DOCS自动   - 在代码审查期间可见的现在可见的变化 迁移本身很简单，但是AI自动化显着改善了我们的开发工作流程。    &lt;！ -  sc_on--&gt;＆＃32;提交由＆＃32;  /u/ashwch   [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lz5eej/postman_to_bruno_weekend_migration_ai_workflow/</guid>
      <pubDate>Sun, 13 Jul 2025 22:10:41 GMT</pubDate>
    </item>
    <item>
      <title>零JDK：默认情况下可再现的构建</title>
      <link>https://www.reddit.com/r/programming/comments/1lz4g7w/zero_jdk_reproducible_builds_by_default/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嗨， 我在过去的几周里一直在从事我自己需要的事情。在启动Java项目时，我经常发现这很烦人，这意味着要做的不仅仅是克隆仓库。我喜欢Maven和Gradle包装器如何在不需要全球工具的情况下使构建可再现，因此我想要JDK类似的东西。 ，所以我构建了一个CLI，让每个项目都可以定义其JDK版本，并自动处理下载，并支持包装器的生成。它还直接在CLI中显示了Foojay的Disco API的所有可用JDK，因此所有内容都位于一个地方。 仍然缺少一些东西，例如Intellij插件，CI集成或自制式水龙头，但它已经可以使用，但是它已经很有用，我很乐意从贡献贡献   /u/u/a gainsed_cup4912       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lz4g7w/zero_jdk_reproducible_builds_by_default/</guid>
      <pubDate>Sun, 13 Jul 2025 21:29:24 GMT</pubDate>
    </item>
    <item>
      <title>Node.js采访问答：第19天</title>
      <link>https://www.reddit.com/r/programming/comments/1lyy8nn/nodejs_interview_qa_day_19/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/myssiriouseye8494     [link]  ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyy8nn/nodejs_interview_qa_day_19/</guid>
      <pubDate>Sun, 13 Jul 2025 17:17:10 GMT</pubDate>
    </item>
    <item>
      <title>使用Cloudflare隧道安全地曝光当地Docker服务</title>
      <link>https://www.reddit.com/r/programming/comments/1lyw7pw/securely_expose_local_docker_services_using/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/root0ps      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyw7pw/securely_expose_local_docker_services_using/</guid>
      <pubDate>Sun, 13 Jul 2025 15:54:48 GMT</pubDate>
    </item>
    <item>
      <title>我对软件工程师在2025年开始职业的建议</title>
      <link>https://www.reddit.com/r/programming/comments/1lyw31n/my_advice_for_software_engineers_starting_their/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/gregorojstersek      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyw31n/my_advice_for_software_engineers_starting_their/</guid>
      <pubDate>Sun, 13 Jul 2025 15:49:29 GMT</pubDate>
    </item>
    </channel>
</rss>