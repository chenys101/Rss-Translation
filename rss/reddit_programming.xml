<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 08 Oct 2025 12:52:47 GMT</lastBuildDate>
    <item>
      <title>无服务器：快速进入市场，更快走向未来 • Srushith Repakula</title>
      <link>https://www.reddit.com/r/programming/comments/1o192hi/serverless_fast_to_market_faster_to_the_future/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/goto-con       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o192hi/serverless_fast_to_market_faster_to_the_future/</guid>
      <pubDate>Wed, 08 Oct 2025 12:27:49 GMT</pubDate>
    </item>
    <item>
      <title>上下文工程和 API</title>
      <link>https://www.reddit.com/r/programming/comments/1o18p73/context_engineering_apis/</link>
      <description><![CDATA[ 由   提交 /u/Finn55   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o18p73/context_engineering_apis/</guid>
      <pubDate>Wed, 08 Oct 2025 12:11:14 GMT</pubDate>
    </item>
    <item>
      <title>大规模解决双重预订：顶尖科技公司的系统设计模式</title>
      <link>https://www.reddit.com/r/programming/comments/1o170e7/solving_double_booking_at_scale_system_design/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/local_ad_6109      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o170e7/solving_double_booking_at_scale_system_design/</guid>
      <pubDate>Wed, 08 Oct 2025 10:43:27 GMT</pubDate>
    </item>
    <item>
      <title>与Tornadovm的纯Modern Java中的程序GPU</title>
      <link>https://www.reddit.com/r/programming/comments/1o16jwu/program_gpus_in_pure_modern_java_with_tornadovm/</link>
      <description><![CDATA[ 由   提交/u/mikebmx1  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o16jwu/program_gpus_in_pure_modern_java_with_tornadovm/</guid>
      <pubDate>Wed, 08 Oct 2025 10:16:27 GMT</pubDate>
    </item>
    <item>
      <title>使用 exaequOS 在 Web 浏览器中使用 WebAssembly WASI 编译器</title>
      <link>https://www.reddit.com/r/programming/comments/1o165l5/webassembly_wasi_compilers_in_the_web_browser/</link>
      <description><![CDATA[ 由   提交/u/exaequos  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o165l5/webassembly_wasi_compilers_in_the_web_browser/</guid>
      <pubDate>Wed, 08 Oct 2025 09:52:10 GMT</pubDate>
    </item>
    <item>
      <title>春季的MTL：为什么重要以及如何使用Hashicorp保管库和内存证书实施它（比特案例研究）</title>
      <link>https://www.reddit.com/r/programming/comments/1o15z4f/mtls_in_spring_why_it_matters_and_how_to/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o15z4f/mtls_in_spring_why_it_matters_and_how_to/</guid>
      <pubDate>Wed, 08 Oct 2025 09:40:38 GMT</pubDate>
    </item>
    <item>
      <title>Tsoding、Bison 和可能的替代方案</title>
      <link>https://www.reddit.com/r/programming/comments/1o15f77/tsoding_bison_and_possible_alternatives/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  因此，编程有影响力的人tsoding（我时不时地看的人）制作了有关Yacc，bison和其他解析工具的视频。显然，这是他系列的一部分，他进入了神秘而过时的GNU东西。要么做出替代方案，要取笑它，要么是两者兼而有之。 这是一件事...当我学会了语言理论时，他们使用野牛为我们提供了“现实生活”。使用语法的示例……至今我仍然使用它的工具。现在，我已经担心自己可能正在使用过时的工具，并且有更好的替代方案需要探索。 我还有某种方法可以完成视频，但是从我到目前为止，迄今为止的编码都没有提及任何更好或更现代的解析代码的方法。这导致我发布此信息... &lt; /p&gt; 您在每日底座上使用什么来制作语法 /解析代码？您在C /CPP中使用了什么？ python呢？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/nac_oh      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o15f77/tsoding_bison_and_possible_alternatives/</guid>
      <pubDate>Wed, 08 Oct 2025 09:04:09 GMT</pubDate>
    </item>
    <item>
      <title>CSS有42个单位</title>
      <link>https://www.reddit.com/r/programming/comments/1o12gps/css_has_42_units/</link>
      <description><![CDATA[ 由   提交 /u/harromeister   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o12gps/css_has_42_units/</guid>
      <pubDate>Wed, 08 Oct 2025 05:54:07 GMT</pubDate>
    </item>
    <item>
      <title>设计用于分支AI对话的SDK（Python + Typescript）</title>
      <link>https://www.reddit.com/r/programming/comments/1o10zkb/designing_an_sdk_for_branching_ai_conversations/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  传统的AI聊天API是线性的 - 从头到尾的一系列消息链。当我们开始尝试实验分支对话时（任何消息都可以分叉进入新路径），出现了许多有趣的技术问题。  有效地维护上下文 - 决定一个分支是否继承了完整的历史，部分历史或开始新鲜（我们将这些上下文模式称为完整/部分/局部/无）。 流式响应在多个分支之间同时进行流式响应，而在多个分支上跨多个分支中的订单不损坏的保证，请确保每个分支的一致性。 later. Handling token limits and usage tracking across diverging branches.  The end result is a small cross-language SDK (Python + TypeScript) that abstracts these concerns away and exposes simple calls like conversations.create(), branches.create(), and messages.stream(). I wrote a short technical post解释我们如何处理这些设计决策以及我们在构建它时学到的知识：  https://afzal.xyz/rethinking-ai-conversations-why-branching-beats-linear-thinking-85ed5cfd97f5   很想听听其他人如何建模相似的分支或树结构化对话系统，尤其是围绕有效维护上下文或可视化对话图。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/sleaktrade      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o10zkb/designing_an_sdk_for_branching_ai_conversations/</guid>
      <pubDate>Wed, 08 Oct 2025 04:28:24 GMT</pubDate>
    </item>
    <item>
      <title>Chandler Carruth：铁锈和碳的内存安全无处不在 | RustConf 2025</title>
      <link>https://www.reddit.com/r/programming/comments/1o0vlzd/chandler_carruth_memory_safety_everywhere_with/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/bluegoliach      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0vlzd/chandler_carruth_memory_safety_everywhere_with/</guid>
      <pubDate>Wed, 08 Oct 2025 00:04:39 GMT</pubDate>
    </item>
    <item>
      <title>裸露检测，AI架构：我们如何在创业公司中解决它</title>
      <link>https://www.reddit.com/r/programming/comments/1o0v1mx/nudity_detection_ai_architecture_how_we_solved_it/</link>
      <description><![CDATA[ 由   提交/u/trolleid   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0v1mx/nudity_detection_ai_architecture_how_we_solved_it/</guid>
      <pubDate>Tue, 07 Oct 2025 23:39:38 GMT</pubDate>
    </item>
    <item>
      <title>可组合状态机：RTS游戏中的建筑可扩展单位行为</title>
      <link>https://www.reddit.com/r/programming/comments/1o0ukwq/composable_state_machines_building_scalable_unit/</link>
      <description><![CDATA[ 由   提交 /u/EgregorAmeriki   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0ukwq/composable_state_machines_building_scalable_unit/</guid>
      <pubDate>Tue, 07 Oct 2025 23:19:11 GMT</pubDate>
    </item>
    <item>
      <title>解释AI的决策树的童年游戏</title>
      <link>https://www.reddit.com/r/programming/comments/1o0t8ml/the_childhood_game_that_explains_ais_decision/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  工程师最近探索了经典棋盘游戏猜测谁是谁？揭示了AI决策树的基本逻辑。 在游戏中，玩家没有猜测 - 他们提出了提供最多信息的问题，直到只剩下一个剩下的可能性。这反映了机器学习中的决策树如何拆分数据：每个“问题”（功能）旨在减少不确定性并创建更清洁的分区。 该项目在游戏的是/否机制和预测性ML过程（例如功能选择和信息增益）之间划分了直接相似之处。就像玩家可能问的那样：“您的角色戴眼镜吗？”要删除一半的选择，模型可能会问：“血压高吗？”为了完善其分类。 通过使用怀旧的，视觉示例，工程师说明了如何理解简单游戏中的问题效率可以使AI模型如何学习以最小的步骤进行准确的预测。   &lt;！ -  sc_on--&gt; 32;&gt; 32;提交由＆＃32; /u/u/shift_devs     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0t8ml/the_childhood_game_that_explains_ais_decision/</guid>
      <pubDate>Tue, 07 Oct 2025 22:22:18 GMT</pubDate>
    </item>
    <item>
      <title>局部和时间空间假设</title>
      <link>https://www.reddit.com/r/programming/comments/1o0ov3x/locality_and_temporalspatial_hypothesis/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ketralnis      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0ov3x/locality_and_temporalspatial_hypothesis/</guid>
      <pubDate>Tue, 07 Oct 2025 19:36:58 GMT</pubDate>
    </item>
    <item>
      <title>创始人的盲点杀死了初创企业</title>
      <link>https://www.reddit.com/r/programming/comments/1o0olp1/the_founders_blind_spot_that_kills_startups/</link>
      <description><![CDATA[大多数初创公司都失败了，因为非技术创始人脱离了产品的技术现实。了解“创始人的盲点”如何解决和不受管理的技术债务会导致灾难性的失败。   由   提交/u/gamunu  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0olp1/the_founders_blind_spot_that_kills_startups/</guid>
      <pubDate>Tue, 07 Oct 2025 19:27:12 GMT</pubDate>
    </item>
    </channel>
</rss>