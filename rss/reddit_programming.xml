<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Thu, 17 Jul 2025 09:33:36 GMT</lastBuildDate>
    <item>
      <title>我们尝试在浏览器和低端手机中运行AI。这是实际工作的</title>
      <link>https://www.reddit.com/r/programming/comments/1m22z6q/we_tried_running_ai_in_browsers_and_lowend_phones/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我们最近着手构建一些雄心勃勃的东西：一种轻巧的AI引擎，可以完全匹配面对面并完全在边缘进行文档检测 - 这意味着没有云，没有GPU，没有像TensorFlow或Onnx这样的重型依赖性。我们的目标是使其在从低端Android手机和网络浏览器到台式机的所有方面都可以使用，即使在离线时也是如此。我们击中了所有通常的墙壁：大型运行时间不合适，模型太重，浏览器推断速度很慢。  因此，我们使用C ++从头开始构建了自己的发动机，以尺寸和速度进行了优化，并将其包装为多个平台（Android（NDK），iOS（Coreml兼容），React Antive，flutter，flutter，WebAssembly for浏览器和桌面的本机二元组。我们的一种自定义模型Kimora是专门为文档理解而构建的 - 即使在艰难的条件下，它也可以很好地处理角落检测，偏斜校正和布局读数。  对于浏览器，我们将模型和二进制文件并行加载，在第一次运行后将它们缓存以进行近乎固定的启动。结果？现在，我们的AI始终跨平台，完全离线，小型型号（〜10–15MB）和最小的负载时间运行。这不是平稳的航行 - 我们学到了很多有关运行时调整，跨平台包装以及Edge部署实际破裂的知识 - 但它起作用了。  如果您曾经尝试过在受约束的设备上或浏览器中运行真正的AI，则很想听听您的想法。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;态href =“ https://blog.extrieve.com/general/from-idea-toe-execution-building-a-cross-platform-platform-ai-eend-forfor-for-the----------&gt; [link]    32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m22z6q/we_tried_running_ai_in_browsers_and_lowend_phones/</guid>
      <pubDate>Thu, 17 Jul 2025 09:25:26 GMT</pubDate>
    </item>
    <item>
      <title>我如何使用Chatgpt分析，调试和重写一个损坏的插件 - 一个小时（7/2025）</title>
      <link>https://www.reddit.com/r/programming/comments/1m2267m/how_i_used_chatgpt_to_analyze_debug_and_rewrite_a/</link>
      <description><![CDATA[From the article: ChatGPT returned a 16-page analysis describing everything I wanted to know about the plugin. Although the plugin used a wide variety of techniques to block registration spam, the analysis concluded, &quot;These vulnerabilities could allow attackers to undermine a site&#39;s security -- ironically using an anti-spam plugin as the入口点。&#39; 它提供了广泛的漏洞清单，包括： 跨站点请求伪造（CSRF）漏洞 反映的跨站点脚本（xss）   未置换的php对象注射 efrigiation  evecect 验证 不当或不存在输出卫生 可疑代码模式 对于每个问题（以及更多），它提供了详细且有用的信息。   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;态 href=&quot;https://www.zdnet.com/article/how-i-used-chatgpt-to-analyze-debug-and-rewrite-a-broken-plugin-from-scratch-in-an-hour&quot;&gt;[link]   [注释]    ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m2267m/how_i_used_chatgpt_to_analyze_debug_and_rewrite_a/</guid>
      <pubDate>Thu, 17 Jul 2025 08:32:51 GMT</pubDate>
    </item>
    <item>
      <title>这个过于长的变量名称可能是评论|乔纳森的博客</title>
      <link>https://www.reddit.com/r/programming/comments/1m223f5/this_overly_long_variable_name_could_have_been_a/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/andrewgreenh     &lt;a href =“ https://www.reddit.com/r/programming/comments/1m223f5/this_overly_long_varible_name_could_have_been_a/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m223f5/this_overly_long_variable_name_could_have_been_a/</guid>
      <pubDate>Thu, 17 Jul 2025 08:27:49 GMT</pubDate>
    </item>
    <item>
      <title>如果您不知道如何编码，请勿振动代码</title>
      <link>https://www.reddit.com/r/programming/comments/1m1yfc5/if_you_dont_know_how_to_code_dont_vibe_code/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  &#39;ai构建的功能快速但无法解释的今天可能会通过QA，但是当它在上午2点失败时，&gt;    &lt;！ -  sc_on-- sc_on--&gt; 32;提交由＆＃32; /u/u/hongster     &lt;a href =“ https://www.reddit.com/r/programming/comments/1m1yfc5/1m1yfc5/if_you_dont_know_know_how_to_code_code_code_dont_vibe_code/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1yfc5/if_you_dont_know_how_to_code_dont_vibe_code/</guid>
      <pubDate>Thu, 17 Jul 2025 04:42:02 GMT</pubDate>
    </item>
    <item>
      <title>亚马逊刚刚推出了kiro.dev。用于规格驱动的开发的AI IDE（这太神奇了！）</title>
      <link>https://www.reddit.com/r/programming/comments/1m1xxwc/amazon_just_launched_kirodev_an_ai_ide_for/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  亚马逊刚刚宣布了   kiro.dev  的公开预览，这是一种新的AI-Powered IDE，旨在从根本上改变我们构建的软件。如果您一直在跟踪代理编码趋势，或者对混乱的“ Vibe编码”会话感到沮丧，那么此工具适合您。 什么是kiro.dev？  kiro是亚马逊对Cursor，Cursor，Copilot和windsurf等AI开发工具不断增长的套件的答案。 Kiro不仅要生成代码片段，还采用了规格驱动的开发方法：您告诉它要构建的内容，它将其分解为规格，技术设计和完整的实施计划。   由Claude 4.0 启动，Kiro不仅仅是Vs vs code fork。它的构建是为了管理复杂性，从第一个想法到生产就绪软件提供了结构。 关键功能      specs＆amp;钩子：直接从单个提示中生成规格，需求，技术设计和任务列表。 Kiro保持代码，文档和规格之间的实时同步。   代理工作流程： ai代理计划并执行任务，建议改进并自动化重复步骤（例如更新测试或扫描安全性问题）。 codebase, supporting deep feature implementation and refactoring. Transparent Actions: Every change is mapped to a task, and you can review, accept, or modify before applying. Integration and Compatibility: Supports VS Code plugins, local and cloud Model Context Protocol (MCP) servers, and is extensible with Amazon Q integration.  开放且安全：在预览期间免费，在发布后承诺免费和高级层。用户代码隐私控件已适用于培训数据退出。  我的早期印象： 我已经开始测试kiro，老实说，我给我留下了深刻的印象。它可以自动生成规格文档，设计图和完整的依赖性任务列表。单击任务使代理可以执行它们，并且文档随着每个代码更改而保持更新。与其他AI IDES的通常的“及时呈现”样式相比，开发工作流程更加有组织。 游戏规则改变者或炒作？ 如果您厌倦了将半锻炼代码合并为生产，Kiro的结构和最佳partices-first Mindset可能适合您。但是，它如何与光标或副驾驶长期堆叠在一起还有待观察。它刚刚启动，预览期之后定价细节仍然是TBD。  是否有人尝试过？这是我们都想要的VS代码+AI，还是另一层抽象？奇怪其余的  r/programming     think think！   在下面分享您的经验和观点！提交由＆＃32; /u/u/hncvj     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1xxwc/amazon_just_launched_kirodev_an_ai_ide_for/</guid>
      <pubDate>Thu, 17 Jul 2025 04:14:43 GMT</pubDate>
    </item>
    <item>
      <title>为什么要使用枚举代替布尔来进行方法参数？</title>
      <link>https://www.reddit.com/r/programming/comments/1m1xf82/why_use_enum_instead_of_boolean_for_method/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/javinpaul      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1xf82/why_use_enum_instead_of_boolean_for_method/</guid>
      <pubDate>Thu, 17 Jul 2025 03:47:22 GMT</pubDate>
    </item>
    <item>
      <title>Systemd的螺母和螺栓 -  SystemD的视觉指南</title>
      <link>https://www.reddit.com/r/programming/comments/1m1u3mv/systemds_nuts_and_bolts_a_visual_guide_to_systemd/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/deepCelibateValue      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1u3mv/systemds_nuts_and_bolts_a_visual_guide_to_systemd/</guid>
      <pubDate>Thu, 17 Jul 2025 01:04:36 GMT</pubDate>
    </item>
    <item>
      <title>卡奇和抽象</title>
      <link>https://www.reddit.com/r/programming/comments/1m1s8cf/caches_and_abstractions/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/mttd       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1s8cf/caches_and_abstractions/</guid>
      <pubDate>Wed, 16 Jul 2025 23:37:49 GMT</pubDate>
    </item>
    <item>
      <title>LOON V1.0-一种模块化语言，可编译为JSON</title>
      <link>https://www.reddit.com/r/programming/comments/1m1rybf/loon_v10_a_modular_language_that_compiles_to_json/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我知道我已经在此reddit上发布了有关此信息的信息，但是，我发布的版本不仅是预发行的，而且还没有释放，而且仍处于实验阶段。    ＆quord“但是loon是什么？方式。 与YAML这样的语言不同，它具有值引用，可重复使用的代码，文件导入和编译器。就像这是如何帮助我的吗？&#39;  没有 可以帮助您，这是一个激情驱动的项目，这些都不是为了解决 solve ，而是要为以下方面做些事情： - 我：为了学习    其他：我喜欢的东西，我喜欢有真正的用途，我在哪里使用？ 好吧，因为它编译为JSON，您可以将其用于文件配置，构建API和WebApps，因此您在JavaScript中已经使用的所有工具不需要更改，因此您只需要编译器。 repo ^  有一个愉快的时光！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/percormerDazzling601     [link link]&gt; [link]&gt; [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1rybf/loon_v10_a_modular_language_that_compiles_to_json/</guid>
      <pubDate>Wed, 16 Jul 2025 23:25:48 GMT</pubDate>
    </item>
    <item>
      <title>软件永远不会完成：拥抱不断发展和变化将导致更好的系统</title>
      <link>https://www.reddit.com/r/programming/comments/1m1rqcz/software_is_never_done_embracing_constant/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/congolomera      [commist]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1rqcz/software_is_never_done_embracing_constant/</guid>
      <pubDate>Wed, 16 Jul 2025 23:16:09 GMT</pubDate>
    </item>
    <item>
      <title>七个钥匙：黑客寓言</title>
      <link>https://www.reddit.com/r/programming/comments/1m1oszc/the_seven_keys_a_hacker_fable/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/deepCelibateValue     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1oszc/the_seven_keys_a_hacker_fable/</guid>
      <pubDate>Wed, 16 Jul 2025 21:15:29 GMT</pubDate>
    </item>
    <item>
      <title>计算机视觉，PI3并失去黑客马拉松</title>
      <link>https://www.reddit.com/r/programming/comments/1m1ob3u/computervision_pi3_and_losing_a_hackathon/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/sonder-otis       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1ob3u/computervision_pi3_and_losing_a_hackathon/</guid>
      <pubDate>Wed, 16 Jul 2025 20:55:49 GMT</pubDate>
    </item>
    <item>
      <title>让我们做游戏吧！ 290：同伴进攻（续）</title>
      <link>https://www.reddit.com/r/programming/comments/1m1ms11/lets_make_a_game_290_companions_attacking/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/apeloverage      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1ms11/lets_make_a_game_290_companions_attacking/</guid>
      <pubDate>Wed, 16 Jul 2025 19:56:13 GMT</pubDate>
    </item>
    <item>
      <title>停止假装你是最后一个开发人员</title>
      <link>https://www.reddit.com/r/programming/comments/1m1mq7u/stop_pretending_youre_the_last_developer/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/robbyrussell   [link] ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1mq7u/stop_pretending_youre_the_last_developer/</guid>
      <pubDate>Wed, 16 Jul 2025 19:54:17 GMT</pubDate>
    </item>
    <item>
      <title>AI Vibe编码如何破坏初级开发商的职业</title>
      <link>https://www.reddit.com/r/programming/comments/1m1kvug/how_ai_vibe_coding_is_destroying_junior/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/aphensed-win9630     [link]  ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1m1kvug/how_ai_vibe_coding_is_destroying_junior/</guid>
      <pubDate>Wed, 16 Jul 2025 18:44:48 GMT</pubDate>
    </item>
    </channel>
</rss>