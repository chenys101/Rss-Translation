<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Sun, 13 Jul 2025 12:47:57 GMT</lastBuildDate>
    <item>
      <title>目标传播：一种生物学上合理的神经网络训练算法</title>
      <link>https://www.reddit.com/r/programming/comments/1lyry5i/target_propagation_a_biologically_plausible/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/databaebee      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyry5i/target_propagation_a_biologically_plausible/</guid>
      <pubDate>Sun, 13 Jul 2025 12:46:21 GMT</pubDate>
    </item>
    <item>
      <title>Nuke-KV-高性能键值商店内置于C ++⚡</title>
      <link>https://www.reddit.com/r/programming/comments/1lyqt7o/nukekv_high_performance_keyvalue_store_built_in_c/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我们最近揭示了 v2.0   - 带有更多命令和功能。 它正在使用HTTP。用于连接之前。但是现在它使用 nuke-wire   tcp方案。 总体表现也非常大大提高。在Becnmark中触摸〜2M OPS/秒！  高级JSON查询：过滤，更新，搜索，删除，删除和附加使用直觉语法。 考虑尝试一下。并给我们评论 - 让我们更快地使事物更快  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/first_mistion_7143     link&gt; link&gt; 32   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyqt7o/nukekv_high_performance_keyvalue_store_built_in_c/</guid>
      <pubDate>Sun, 13 Jul 2025 11:45:11 GMT</pubDate>
    </item>
    <item>
      <title>周日读工程经理</title>
      <link>https://www.reddit.com/r/programming/comments/1lyqhtc/sunday_reads_for_engineering_managers/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/stmoreau       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyqhtc/sunday_reads_for_engineering_managers/</guid>
      <pubDate>Sun, 13 Jul 2025 11:26:53 GMT</pubDate>
    </item>
    <item>
      <title>用分步休息和春季AI示例在LLM工具上深入研究LLM工具</title>
      <link>https://www.reddit.com/r/programming/comments/1lyoxct/wrote_a_deep_dive_on_llm_tool_calling_with/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/muthuishere2101     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyoxct/wrote_a_deep_dive_on_llm_tool_calling_with/</guid>
      <pubDate>Sun, 13 Jul 2025 09:45:41 GMT</pubDate>
    </item>
    <item>
      <title>真正有趣且务实的方法是主要和分支机构 - 人们正在使用它吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1lyovek/really_interesting_and_pragmatic_approach_to_main/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/martindukz       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyovek/really_interesting_and_pragmatic_approach_to_main/</guid>
      <pubDate>Sun, 13 Jul 2025 09:41:59 GMT</pubDate>
    </item>
    <item>
      <title>Blazed.js</title>
      <link>https://www.reddit.com/r/programming/comments/1lynput/blazedjs/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  所以大家好！ 我一直在维护此包装以来，自去年以来，NPM中的blazed.js in npm是快速轻巧的高性重量http and dns client    ，如果您能为您提供的p Persive pross    https://www.npmjs.coms.com/package/package/blazed.js         预先感谢：）提交由＆＃32; /u/u/u/flat_molasses_9715       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lynput/blazedjs/</guid>
      <pubDate>Sun, 13 Jul 2025 08:22:19 GMT</pubDate>
    </item>
    <item>
      <title>可伸缩性</title>
      <link>https://www.reddit.com/r/programming/comments/1lyngbu/scalability/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;态href =“ https://open.substack.com/pub/theremoteengineer/p/scalability-ins-system-design?utm_source = share＆amp； amp; utm_medium = android＆am = android&amp;r = 1rms38”&gt; [link]&gt; [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyngbu/scalability/</guid>
      <pubDate>Sun, 13 Jul 2025 08:04:45 GMT</pubDate>
    </item>
    <item>
      <title>研究发现，AI减慢了一些经验丰富的软件开发人员。</title>
      <link>https://www.reddit.com/r/programming/comments/1lykgzc/ai_slows_down_some_experienced_software/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/donutloop     [link]        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lykgzc/ai_slows_down_some_experienced_software/</guid>
      <pubDate>Sun, 13 Jul 2025 04:57:39 GMT</pubDate>
    </item>
    <item>
      <title>用命令使用跟踪和智能别名建议的TUI用于别名管理</title>
      <link>https://www.reddit.com/r/programming/comments/1lyk875/tui_for_alias_management_with_command_usage/</link>
      <description><![CDATA[Hey everyone, I built alman (alias manager) a command-line tool and TUI designed to make alias management easier, by using a cool algorithm to detect commands in your terminal workflow which could benefit from having an alias, and then intelligently suggesting an alias for that command, thereby saving you time and击键。 这是 github ： https：//github.com/github./github./github/vaibhav-mattoo/alghav-mattoo/alman/alman 根据：   长度：更长的命令得到略有提升（使用长度^（3/5）避免偏见）。      prysenter 命令您使用的命令通常更高。 ＆lt; 1天，＆lt; 1周的0.5倍，年龄较大的0.25倍）。  这确保了最有用的命令优先级用于别名创建。然后，它使用以下方案产生明智的别名建议，例如：   元音删除：GIT状态→GST    abbreviation ：ls -la→ls -la→ll  li&gt;        first li&gt; li&gt; dockin  docker  docker&gt; docker&gt; docker&gt; docker&gt;截断：git neckout→gco    前缀匹配：git命令→g + sub -cmmand letter   其某些功能是：           别名文件。 快速别名操作的命令行模式。 跨平台：在Linux，MacOS，MacOS，BSD和Windows上使用（通过WSL）。    Alman在任何平台上都可以在任何平台上使用，并且可以轻松地设置和  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/yboma2       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyk875/tui_for_alias_management_with_command_usage/</guid>
      <pubDate>Sun, 13 Jul 2025 04:43:25 GMT</pubDate>
    </item>
    <item>
      <title>将Coroutines入侵C</title>
      <link>https://www.reddit.com/r/programming/comments/1lydg47/hacking_coroutines_into_c/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/wiomoc   [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lydg47/hacking_coroutines_into_c/</guid>
      <pubDate>Sat, 12 Jul 2025 22:52:38 GMT</pubDate>
    </item>
    <item>
      <title>通知您的iPhone或观看Claude Code完成</title>
      <link>https://www.reddit.com/r/programming/comments/1lydeyk/notify_your_iphone_or_watch_when_claude_code/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  在未能在线找到好的指南后，今天就写了这篇文章。希望有人发现它有用！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;态href =“ https://justin.searls.co/posts/notify-your-ir-iphone-or-watch-when-claude-code-finishes/”&gt; [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lydeyk/notify_your_iphone_or_watch_when_claude_code/</guid>
      <pubDate>Sat, 12 Jul 2025 22:51:07 GMT</pubDate>
    </item>
    <item>
      <title>列表失败行为测验</title>
      <link>https://www.reddit.com/r/programming/comments/1lyd2os/list_failfast_behavior_quiz/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  下面的java代码的输出是什么？ `````  list＆lt; string＆gt; list = new arrayList＆lt;（list.of（;  返回s.touppercase（）;  }）。  无限回路   汇编错误     **/ 链接到解决方案和解释：    https://javabulletin.substack.com/p/list-fail-fail-fail-fast-fast-behavior-quiz-quiz-quiz-quiz 提交由＆＃32; /u/u/u/decuntional-ad2036      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyd2os/list_failfast_behavior_quiz/</guid>
      <pubDate>Sat, 12 Jul 2025 22:35:10 GMT</pubDate>
    </item>
    <item>
      <title>用C89编写的HTTP解析器单头库，总计50行。</title>
      <link>https://www.reddit.com/r/programming/comments/1lycxe3/a_http_parser_singleheader_library_written_in_c89/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/yurtrimu       [注释]    ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lycxe3/a_http_parser_singleheader_library_written_in_c89/</guid>
      <pubDate>Sat, 12 Jul 2025 22:28:24 GMT</pubDate>
    </item>
    <item>
      <title>AI不会替换开发人员。但是掌握AI的开发人员将取代其余的。</title>
      <link>https://www.reddit.com/r/programming/comments/1lycb4i/ai_wont_replace_devs_but_devs_who_master_ai_will/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;    AI不会替换开发人员。但是掌握AI的Devs将取代其余的。  这是我的看法 - 自从一开始就在包括现实世界中的大量用例中使用Chatgpt和其他AI模型。您仍然必须思考。 您是建筑师。下午。调试器。有远见的人。如果您正确地引导该模型，它将非常强大。但是，如果您期望它为您解决问题 - 您需要进行严格的现实检查。 特别是对于拥有10年以上经验的开发人员：您的直觉和心理模型不会干净地转移。使用AI井需要全面重置您如何解决问题。  这是我使用AI：     与GPT-4O（创造性，快速，快速，灵活） 压力测试的逻辑与GPT O3（更接地）的cons forter for for for for for for gpt-4o（富有创造力，灵活）    实施）  即使是这篇文章，我都将思想脑化成GPT，它有助于清楚地构造它们。这些想法是我的。人工智能只是剥离绒毛并削减逻辑。 那就是它发光的时候 - 作为合作者，而不是拐杖。    示例：本周我正在调试简单的内容：我的MCP服务器的SSE auth。启动前的最后一步。应该花一个小时。花了2天。 为什么？我很懒。我告诉克劳德：“只需重复使用旧代码即可。”克劳德向后推：“我们应该重建它。”我忽略了它。尝试黑客入侵。它失败了。 所以我停了下来。    2.5个小时的深入研究 -  chatgpt，困惑，文档 我自己读了所有内容 - 不仅将其粘贴到模型 我回来了，我回来了，说：干净，工作，完成。 课程？ 首先思考。使用第二个模型。   大多数人仍然像对待魔术一样对待AI。它不是。这是一个工具。如果您不知道如何使用它，它将不会为您提供帮助。 您不会给农民一个拖拉机，并期望在第一天获得10倍的结果。如果他们在镰刀上度过了10年，那么一开始他们会更快。但是从长远来看，学会驱动拖拉机的人会获胜。 与AI相同。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/artemgetman      [注释]    ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lycb4i/ai_wont_replace_devs_but_devs_who_master_ai_will/</guid>
      <pubDate>Sat, 12 Jul 2025 21:59:43 GMT</pubDate>
    </item>
    <item>
      <title>RING编程语言版本1.23已发布！</title>
      <link>https://www.reddit.com/r/programming/comments/1lyc4wh/ring_programming_language_version_123_has_been/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   ring是一种动态的编程语言，专注于自然语言编程和声明性编程范式，并且会让您在编程方面有所不同，以及如何以更好的方式解决问题。该语言轻巧，可嵌入和跨平台（桌面，Web，移动和微控制器）。它利用确定性，安全和灵活的基于范围的内存管理系统，该系统将逃生分析和可选参考计数与周期检测结合在一起。它是专门为开发应用程序，工具和特定于域的语言（DSLS）而设计的。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/mrpro1a1      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lyc4wh/ring_programming_language_version_123_has_been/</guid>
      <pubDate>Sat, 12 Jul 2025 21:51:37 GMT</pubDate>
    </item>
    </channel>
</rss>