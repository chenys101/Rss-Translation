<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Mon, 15 Sep 2025 09:30:48 GMT</lastBuildDate>
    <item>
      <title>真正的航空事故的课程，用于更好的软件工程（5本周您可以使用）</title>
      <link>https://www.reddit.com/r/programming/comments/1nhh5z3/lessons_from_real_aviation_accidents_for_better/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  航空是人类最可靠，最高赌注的系统之一，不是因为飞机永远不会失败，而是因为该行业将失败视为老师。数十年的事故调查，人类因素研究和协作培训将悲剧变成使飞行变得非常安全的做法。该工具箱与英雄无关，也不是“更多的清单”。这是关于注意力的漂移，语言如何缩小或澄清选项，团队如何共享（或ho积）环境以及设计如何支持或破坏人类在压力下的人类。软件工程的复杂性相似：模棱两可的信号，时间压力，脆弱的接口以及通过部分信息做出的决定。我们可以借很多（谨慎地适应）来调试更智能，更好地处理事件并建立学习的文化。 我一直在研究经典事故，并将课程翻译成我的团队实际使用的具体实践。这是五个，带有航空故事和您可以尝试的软件移动。   1。保护“飞行路径”（情境意识） - 东部空气线401，1972   固定在烧毁的齿轮灯上并漂移到大沼泽地上的机组人员。真正的教训不是“小心”，而是角色设计：有人必须始终保护大局。尝试软件：在事件中，分配一个不触摸键盘的情境潜在客户。他们跟踪用户影响，SLO，时间压力和决策点，并在出现时呼唤隧道视觉。   2。语言塑造结果 -  Avianca 52，1990   延长持有后，机组人员传达了“优先”，而不是宣布紧急情况；燃料耗尽了。歧义杀死了紧迫性。尝试软件：在事件和评论中使用闭环，明确的通讯：“我需要X来避免Z撞击 - 您可以拥有它吗？”需要确认。 Ban Fuzzy询问“有人看这个？”    3。使模式不可能错过 -  Helios 522，2005   在错误的设置中留下的加压模式导致压力下的误解。模式混乱是人类因子陷阱。尝试软件：到处的表面模式通讯：巨大的“登台/产品”水印，可见的特征范围状态，安全默认值和护栏关闭时高对比度警告。请勿将模式隐藏在Tiny UI Chrome或模糊配置中。   4。当运行手册结束时，Teamcraft开始 -  United 232，1989   总液压故障仅留下节气门控制；跨职能的船员即兴差异推力，挽救了许多生命。该系统具有弹性，因为权威和想法是分发的。尝试软件：在大事件中，明确邀请出席的任何人，然后收敛。保持角色清晰度（指挥官，抄写员，情境潜在客户），但欢迎在安全切换和沙盒后面进行创意实验。   5。不确定性的火车，而不是脚本 - 澳航32，2010   引擎故障触发了一系列警报。帮助并没有记住所有信息，而是纪律处分的优先级（“航行，导航，交流”），共享的心理模型和实践。尝试软件：运行混乱的游戏日：注入多个故障，有限的遥测和嘈杂的警报。时间盒分类，冻结非必要的变化以及练习升级阈值。认知陷阱的汇报，而不是责备。 飞行员在下一个冲刺（总共90分钟）：  ••向您的事件角色表中添加情景铅；在下一场比赛中排练它。 •介绍明确询问的短语手册（“我需要/by/fampect/lants/eta”）。 •在控制台或CLI中运送模式横幅；在视觉上使危险状态大声。 •安排一个混乱的演习；捕获3个惊喜和1个更改。   如果这种学习方式（从实际的事故到实用习惯），我写了一本简短的书，将这些案例扩展到具体的工程实践中。今天在亚马逊上免费的“驾驶舱代码”一书。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/dimply-key6095      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nhh5z3/lessons_from_real_aviation_accidents_for_better/</guid>
      <pubDate>Mon, 15 Sep 2025 09:27:50 GMT</pubDate>
    </item>
    <item>
      <title>Java中的观察者模式</title>
      <link>https://www.reddit.com/r/programming/comments/1nhgnqf/observer_pattern_in_java/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/mstrbeton      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nhgnqf/observer_pattern_in_java/</guid>
      <pubDate>Mon, 15 Sep 2025 08:55:18 GMT</pubDate>
    </item>
    <item>
      <title>帮助我开始编程</title>
      <link>https://www.reddit.com/r/programming/comments/1nhgbxi/help_me_start_programming/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿，我想学习的python’i已经下载了pycharm，但是idk如何正确使用它，就像idk一样，像idk如何看我在做什么，我在做什么，建议我一些应用程序或其他任何东西，我知道发生了什么事，但是当我在脚本上看到了一些脚本（我在脚上播放了一些东西） VID作为一个开始，向我推荐更多  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/no/no-detective-3033     [link]  ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nhgbxi/help_me_start_programming/</guid>
      <pubDate>Mon, 15 Sep 2025 08:32:54 GMT</pubDate>
    </item>
    <item>
      <title>在GO中构建一个简单的基于堆栈的虚拟机</title>
      <link>https://www.reddit.com/r/programming/comments/1nhfigu/building_a_simple_stackbased_virtual_machine_in_go/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我一直在尝试在GO中构建最小的基于堆栈的虚拟机，灵感来自WebAssembly和EVM。 它处理了编译的字节，基本的算术，基本的算术和简单的执行流动。在此处写入该过程  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/darkripper214      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nhfigu/building_a_simple_stackbased_virtual_machine_in_go/</guid>
      <pubDate>Mon, 15 Sep 2025 07:36:44 GMT</pubDate>
    </item>
    <item>
      <title>有关建造者设计模式的综合指南，并具有所有口味和示例</title>
      <link>https://www.reddit.com/r/programming/comments/1nhf754/a_comprehensive_guide_on_builder_design_pattern/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  构建具有许多可选参数的复杂对象通常会导致一团糟的望远镜构造函数或容易出错的固定器方法。 The Builder Pattern solves this by providing a clear, step-by-step process for creating objects, resulting in code that is more readable, maintainable, and thread-safe. This article explores the pattern through a Custom Pizza订单类比，使用现代Java 21兼容代码展示了经典方法和现代流利的风格。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/eRdsingh24      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nhf754/a_comprehensive_guide_on_builder_design_pattern/</guid>
      <pubDate>Mon, 15 Sep 2025 07:16:46 GMT</pubDate>
    </item>
    <item>
      <title>职业建议</title>
      <link>https://www.reddit.com/r/programming/comments/1nhez8y/career_advice/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  到目前为止，我可以在哪里共享我的编码旅程并获得一些建议？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/om3x4     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nhez8y/career_advice/</guid>
      <pubDate>Mon, 15 Sep 2025 07:02:53 GMT</pubDate>
    </item>
    <item>
      <title>虚假的程序员相信无效指针</title>
      <link>https://www.reddit.com/r/programming/comments/1nhekur/falsehoods_programmers_believe_about_null_pointers/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/mmaksimovic   [link] ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nhekur/falsehoods_programmers_believe_about_null_pointers/</guid>
      <pubDate>Mon, 15 Sep 2025 06:37:47 GMT</pubDate>
    </item>
    <item>
      <title>在纯Java中构建了高性能键值数据存储</title>
      <link>https://www.reddit.com/r/programming/comments/1nhdu6k/built_a_highperformance_keyvalue_datastore_in/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好，我很高兴分享一个小的里程碑，这是我过去2年以来在周末的空闲时间工作的项目。   , its still under development. I’ve published some benchmarks results The performance is on par with LevelDB, and for comparison I also included Facebook&#39;s RocksDB (which is a different beast总共） 我还在我是这是唯一的开发人员，所以我敢肯定，我已经滥用了Java，在某些地方丢失了Java，错过的Edge案例甚至明显的错误。我很想听听任何反馈，以及那些尝试过的人的问题。 谢谢大家。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/theuntamed000      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nhdu6k/built_a_highperformance_keyvalue_datastore_in/</guid>
      <pubDate>Mon, 15 Sep 2025 05:52:52 GMT</pubDate>
    </item>
    <item>
      <title>因此，您想主持自己的LLM吗？不。</title>
      <link>https://www.reddit.com/r/programming/comments/1nh8td5/so_you_want_to_host_your_own_llm_dont/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/myusuf3       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nh8td5/so_you_want_to_host_your_own_llm_dont/</guid>
      <pubDate>Mon, 15 Sep 2025 01:29:09 GMT</pubDate>
    </item>
    <item>
      <title>建造的forpastpc bc我对通常的分布式服务通讯感到沮丧，不再是REST API或重型MQ</title>
      <link>https://www.reddit.com/r/programming/comments/1nh45ba/built_fasterpc_bc_i_was_frustrated_with_the_usual/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿，大家，已经为此工作了一段时间，最终准备共享 - 建造了forperpc bc，我对通常的分布式服务通讯感到沮丧，在这里，所有内容都在投票端的端点或处理重量级的消息代理基础架构。 TBH大多数人完全跳过MQ，只使用基本的HTTP调用。 基本上是双向JSON RPC，而不是Websockets，可以使不同机器上的Python方法用与本地函数呼叫相同的语法相互呼叫。听起来很简单，但建筑含义对于分布式系统很重要。 runs on any websocket-capable server - docker containers, node.js processes, ruby​​ on rails apps, whatever. the problem i was solving: building my AI OS (Bodega) with 80+ concurrent processes across multiple machines, and traditional ipc approaches had issues: --rest apis = constant polling + request/response latency overhead + managing http状态代码   -  MQ =直接同步服务通信的架构过度杀伤   - 存在RPC解决方案=太重（grpc）或缺失的双向功能 是什么使forterpc cooler和Sipple clast plance  pr&gt;通过p&gt; pr&gt; pl&gt; pl&gt;可配置的可配置的向后退回逻辑   - 语言 - 语言协议（python node.js↔重新连接 我使用IT使用IT WIHT Bodega来处理与分布式工作者服务的狗屎负载并发REQ：ODF文本提取器，FFT音频处理器，图像振荡模型，语音转录引擎，OCR管道，OCR管道，情感分析工人，转换服务，内容推荐发动机。它们是专门的微服务，需要在没有HTTP请求周期开销或异步消息传递复杂性的情况下进行沟通。   处理货架上的东西，例如连接下降，跨工人实例，请求超时，请求超时，对复杂对象进行自定义数据序列化。 href =“ https://github.com/srswti/fasterpc”&gt; https://github.com/srsrswti/fasterpc   示例Directory目录具有完整的多service示例。老实说，这填补了简单的HTTP呼叫与需要实时双向通信的分布式系统的简单HTTP呼叫之间的空白。 仍然早期阶段，但在我的AI OS中进行了战斗测试。有关整体系统的更多背景： https://www.reddit.com/r/localllm/comments/1najvevj/built_an_local_ai_ai_ai_os_you_can_talk_talk_to_to_to_to_that_start_start_started/？ source = share＆amp; utm_medium = web3x＆amp; utm_name = web3xcss＆amp; utm_term = 1＆amp; utm_content = share_button    &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/dumbisedask2887       [注释]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nh45ba/built_fasterpc_bc_i_was_frustrated_with_the_usual/</guid>
      <pubDate>Sun, 14 Sep 2025 21:56:21 GMT</pubDate>
    </item>
    <item>
      <title>Z3的愚蠢介绍。用非常简单的示例探索约束求解器的世界。</title>
      <link>https://www.reddit.com/r/programming/comments/1nh38nn/a_dumb_introduction_to_z3_exploring_the_world_of/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/m1m1r0n      [注释]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nh38nn/a_dumb_introduction_to_z3_exploring_the_world_of/</guid>
      <pubDate>Sun, 14 Sep 2025 21:19:17 GMT</pubDate>
    </item>
    <item>
      <title>如何从自由职业者开始担任工程师</title>
      <link>https://www.reddit.com/r/programming/comments/1nh2g7x/how_to_start_with_freelance_work_as_an_engineer/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/gregorojstersek      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nh2g7x/how_to_start_with_freelance_work_as_an_engineer/</guid>
      <pubDate>Sun, 14 Sep 2025 20:47:49 GMT</pubDate>
    </item>
    <item>
      <title>Java今年30岁// //这就是为什么它仍在获胜的原因</title>
      <link>https://www.reddit.com/r/programming/comments/1ngyt86/java_is_30_years_old_heres_why_its_still_winning/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/bluegoliath      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ngyt86/java_is_30_years_old_heres_why_its_still_winning/</guid>
      <pubDate>Sun, 14 Sep 2025 18:26:28 GMT</pubDate>
    </item>
    <item>
      <title>PostgreSQL现场指南 - 新用户的参考指南</title>
      <link>https://www.reddit.com/r/programming/comments/1ngxlws/postgresql_field_guide_the_reference_guide_for/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  许多Postgres书籍讨论了针对经验丰富用户的一些高级主题。不是新的，或者我们应该说新手用户可能只是在做一些开发工作或由内部工作项目领导的时候偶然发现的新手用户，指导他们寻找开源。如果是您，这本参考书将指导您进行旅程，并帮助您了解为Postgres上出色的高级书籍做准备的整体概念。参考指南分为关键部分，以便在您可能需要快速刷新知识库并填充空白以指导您从实施到部署的情况下单独使用每个部分，从而提供了对PostgreSql的了解。提交由＆＃32; /u/u/unlikely_willow2842       [link]   ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ngxlws/postgresql_field_guide_the_reference_guide_for/</guid>
      <pubDate>Sun, 14 Sep 2025 17:39:56 GMT</pubDate>
    </item>
    <item>
      <title>Nytril：一种编程语言和一种标记语言</title>
      <link>https://www.reddit.com/r/programming/comments/1ngwm1p/nytril_a_programming_language_and_a_markup/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ngwm1p/nytril_a_programming_language_and_a_markup/</guid>
      <pubDate>Sun, 14 Sep 2025 17:01:44 GMT</pubDate>
    </item>
    </channel>
</rss>